#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  Run this with your long running shell command by pipe, 
  then it will send a short report by email.

  * Usage
    $ a-very-long-running-job 2>&1 | report 

  * Install
    $ bash <(curl -s https://raw.github.com/rath/toys/master/install_report.sh)

  * Config lookup order
    1. inline (CONFIG_TEMPLATE)
    2. ./.report.conf 
    3. $HOME/.report.conf
    4. /etc/report.conf

  @author Jang-Ho Hwang <rath@xrath.com>
  @version 0.1, 2013-05-24 04:40
"""
import os
import sys
import time
import collections
import smtplib
import StringIO
import md5
import ConfigParser

RECENT_OUTPUT_LINES = 50

CONFIG_TEMPLATE = """
[Credential]
google.username=report@mydomain.com
google.password=********

[Report]
from.name=Reporter
target.email=sysadmin@mydomain.com
"""
inline_config = None
if not md5.new(CONFIG_TEMPLATE).hexdigest()=='7527cd83b85ff9b4e788dc6df3a95698':
    inline_config = StringIO.StringIO(CONFIG_TEMPLATE)

def cf(path): 
    if os.path.exists(path):
        return open(path) # break open-close principle hehe 
    return None

config = ConfigParser.ConfigParser()
config.readfp(inline_config or 
    cf(".report.conf") or
    cf("%s/.report.conf" % (os.environ['HOME'])) or
    cf("/etc/report.conf"))

GOOGLE_USERNAME = config.get('Credential', 'google.username')
GOOGLE_PASSWORD = config.get('Credential', 'google.password')
FROM_NAME = config.get('Report', 'from.name')
TARGET_EMAIL = config.get('Report', 'target.email')

def get_target_pid():
    ret = 0
    stream = os.popen("ps -eo pid,ppid")
    stream.readline() # skip header 
    for line in stream.readlines():
        pid, ppid = map(int, line.split())
        if pid==os.getpid():
            continue
        if ppid==os.getppid():
            ret = pid
            break
    stream.close()
    return ret


def get_cmdline(pid):
    stream = os.popen("ps -p %d -o command" % (pid))
    stream.readline() # skip header
    ret = stream.readline().strip()
    stream.close()

    i0 = ret.rfind('/')
    if not i0==-1:
        ret = ret[i0+1:]
    return ret

def send_report(subject, body, elapsed):
    smtp = smtplib.SMTP('smtp.gmail.com', 587)
    smtp.starttls()
    smtp.ehlo()
    smtp.login(GOOGLE_USERNAME, GOOGLE_PASSWORD)
    smtp.sendmail(GOOGLE_USERNAME, TARGET_EMAIL, 
"""To: %s
From: %s <%s>
Content-Type: text/html; charset=utf-8
Subject: %s

Recent %d lines
<pre style="font-family: Courier New; font-size: 0.92em;">
%s
</pre>
Elapsed time: %2.1f seconds
""" % (TARGET_EMAIL, FROM_NAME, GOOGLE_USERNAME, subject, 
        RECENT_OUTPUT_LINES, body, (time_end-time_start)))
    smtp.close()


if __name__=='__main__':
    # Test config before executing long running job 
    smtp = smtplib.SMTP('smtp.gmail.com', 587)
    smtp.starttls()
    smtp.login(GOOGLE_USERNAME, GOOGLE_PASSWORD)
    smtp.close()


    target_cmdline = get_cmdline(get_target_pid())
    recent_outputs = collections.deque(maxlen=RECENT_OUTPUT_LINES)
    time_start = time.time()
    while True:
        line = sys.stdin.readline()
        if line=='': 
            break 
        line = line.rstrip()
        recent_outputs.append(">> %s" % line)
        print line
    elapsed = time.time() - time_start

    if elapsed > 3.0:
        subject = "%s" % (target_cmdline)
        body = '\n'.join(recent_outputs)
        send_report(subject, body, elapsed_time)
